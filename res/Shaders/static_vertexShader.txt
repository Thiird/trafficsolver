#version 400 core

//Attributes coming from Entity VAO
in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in mat4 transformationMatrix; //Entity transformations, also called modelMatrix
in vec3 overlayColor;
in float alpha;
in vec3 id;

//Attributes going from this vertex shader to the related fragment shader
out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out vec3 out_overlayColor;
out float out_alpha;


//Attributes coming from the JAVA code
uniform mat4 projectionMatrix; //Camera matrix (FOV + clipping planes)
uniform mat4 viewMatrix; //Inverse of what would the camera transformationMatrix be , moves the entities in the opposite direction of the camera
uniform vec3 lightPosition;

void main(void)
{	
	//Computing vertex position
	vec4 worldPosition = transformationMatrix * vec4(position,1.0); // Position of the entity after it has moved from its original position
	vec4 positionRelativeToCam = viewMatrix * worldPosition; //Position of the entity after the camera has moved
	gl_Position =  projectionMatrix * positionRelativeToCam; //Position after the camera projectionMatrix has been applied
	
	pass_textureCoords = textureCoords;
	
	vec3 actualNormal = normal;
	
	surfaceNormal = (transformationMatrix * vec4(normal,0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	out_overlayColor = overlayColor;
	out_alpha = alpha;
}